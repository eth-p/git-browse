#!/usr/bin/env bash
# git-browse | Copyright (C) 2021 eth-p
# Repository: https://github.com/eth-p/git-browse
# =============================================================================
#
# Summary
# -------
#
#   A git commit browser powered by fzf.
#
#
# Synopsis
# --------
#
#   Browse the current branch:
#
#     git browse
#
#   Browse another branch:
#
#     git browse master
#
#
# =============================================================================

# If fzf is not installed, use a simple git tree viewer.
if ! command -v fzf &>/dev/null; then
	git log --graph --decorate --pretty=online --abbrev-commit
	exit $?
fi


# -----------------------------------------------------------------------------
# Utility Functions:
# -----------------------------------------------------------------------------

# Function: commitbrowser:util:term_width
# Returns the effective width of the terminal.
# If run from within the 'fzf' preview, this will return the preview columns.
#
# Stdout:
#   The number of columns available.
commitbrowser:util:term_width() {
	if [[ -n "${FZF_PREVIEW_COLUMNS:-}" ]]; then
		echo "$FZF_PREVIEW_COLUMNS"
		return
	fi

	stty size </dev/tty 2>/dev/null | cut -d' ' -f2 \
		|| tput cols </dev/null 2>/dev/tty
}

# Function: commitbrowser:util:line_width
# Returns the effective width of a line (removing ANSI colors).
# Note: Does not handle multi-character Unicode chars properly.
#
# Args:
#   $1  The line to look at.
#
# Stdout:
#   The width of the provided line.
commitbrowser:util:line_width() {
	echo $(( $(sed 's/'$'\x1B''\[[0-9;]*m//g' <<< "$1" | wc -c ) ))
}

# Function: commitbrowser:util:helper_command
# Returns a bash-eval'able string which runs a helper script.
commitbrowser:util:helper_command() {
	printf "__COMMITBROWSER_HELPER=%q %q" "$1" "${BASH_SOURCE[0]}"
	if [[ "$#" -gt 1 ]]; then
		printf " %q" "${@:2}"
	fi
}

# Function: commitbrowser:util:helper_command_tui_fzf
# Returns a "bind" command that draws over the current fzf window.
commitbrowser:util:helper_command_tui_fzf() {
	local command="$(
		printf 'echo {} | %s %s %s' \
			'__COMMITBROWSER_FZF=tui' \
			"$(commitbrowser:util:helper_command "$@")
	")"

	# Wrap the command in execute-silent.
	printf "execute-silent(%s)+clear-screen" "$command"
}

# Function: commitbrowser:util:helper_command_preview_fzf
# Returns a fzf preview command.
commitbrowser:util:helper_command_preview_fzf() {
	printf "echo {} | __COMMITBROWSER_FZF=preview "
	commitbrowser:util:helper_command "$@"
}

# Function: commitbrowser:util:boxed
# Executes a command and draws a fzf-like box around it.
#
# Args:
#   ... The command to execute.
commitbrowser:util:boxed() {
	export FZF_PREVIEW_COLUMNS="$(( $(commitbrowser:util:term_width) - 4 ))"
	local color=$'\x1B[0;39m\x1B[38;5;241m'
	local reset=$'\x1B[0m'

	# Draw the box header.
	printf "${color}╭ %${FZF_PREVIEW_COLUMNS}s ╮${reset}\n" | sed 's/ /─/g'
	
	# Draw the box contents.
	local lines=5
	local line
	local padding
	{ "$@" || true; } | while read -r line; do
		lines="$(( lines + 1 ))"
		line_width="$(commitbrowser:util:line_width "$line")"
		padding=$(( FZF_PREVIEW_COLUMNS - line_width ))
		printf "${color}│${reset} %s%${padding}s ${color} │${reset}\n" "$line"
	done

	# Draw remaining lines.
	while [[ "$lines" -lt "$__COMMITBROWSER_PREVIEW" ]]; do
		lines="$(( lines + 1 ))"
		printf "${color}│${reset} %${FZF_PREVIEW_COLUMNS}s ${color}│${reset}\n"
	done


	# Draw the box footer.
	printf "${color}╰ %${FZF_PREVIEW_COLUMNS}s ╯${reset}\n" | sed 's/ /─/g'
}

# Function: commitbrowser:util:pager
# Smartly writes a message somewhere.
#
# For no lines, nothing will happen.
# For a single line of input, tmux display-message will be used.
# For multiple lines, less will be used.
commitbrowser:util:pager() {
	local first_line
	local second_line

	if ! read -r first_line; then
		return 0
	fi

	# If no tmux, just go straight to less.
	if ! command -v tmux &>/dev/null || [[ -z "${TMUX:-}" ]]; then
		{ echo "$first_line"; cat; } | commitbrowser:tool:less
		return $?
	fi

	# Read the second line and determine whether to use tmux or less.
	if ! read -r second_line; then
		tmux display-message "$first_line"
		return 0
	fi

	{
		echo "$first_line"
		echo "$second_line"
		cat
	} | commitbrowser:tool:less "$@"
}


# -----------------------------------------------------------------------------
# IPC Functions:
# -----------------------------------------------------------------------------

# Function: commitbrowser:__ipc
# Sends a bash command to execute after the top-level fzf instance is exited.
commitbrowser:__ipc() {
	printf "%q " "$@" 1>&3
	printf "\n" 1>&3
}

# Function: commitbrowser:__ipc_handle_breakexit
# Intercepts and handles the "break" and "exit" IPC commands.
#
# FD3 needs to be redirected to FD0 before this is called.
commitbrowser:__ipc_handle_breakexit() {
	local cmd
	local subshell_pid
	read -r subshell_pid

	while read -r cmd; do
		case "$cmd" in
			break|exit)
				commitbrowser:__try_kill_fzf "$subshell_pid"

				if [[ "${__COMMITBROWSER_FZF:-}" = "tui" ]]; then
					printf "\x1B[?1000h" >/dev/tty # Re-enable mouse reporting.

					# Forward it to the parent menu.
					if [[ "$cmd" = "exit" ]]; then
						commitbrowser:__ipc "exit"
					fi
				fi ;;

			*)
				printf "%s\n" "$cmd"
				;;
		esac
	done
}

# Function: commitbrowser:__try_kill_fzf
# Tries to kill any "fzf" process under the provided parent PID.
commitbrowser:__try_kill_fzf() {
	local name args target_pid
	# Get the process name.
	read -r name args < <(ps -p "$1" -o args | tail -n 1)

	# Kill it if it's fzf.
	if [[ "$name" = "fzf" ]]; then
		kill -2 "$1"
		return 0
	fi

	# Look at the process' children for fzf.
	{ pgrep -P "$1" || true; } | while read -r target_pid; do
		if commitbrowser:__try_kill_fzf "$target_pid"; then
			return 0
		fi
	done

	return 1
}


# -----------------------------------------------------------------------------
# Parsing Functions:
# -----------------------------------------------------------------------------

# Function: commitbrowser:parse:commit_from_git_log
# Parses the short commit SHA parsed from a line of `git log --oneline`.
#
# Args:
#   $1  The commit log line.
#
# Stdout:
#   The commit SHA hash.
commitbrowser:parse:commit_from_git_log() {
	grep '[a-fA-F0-9]\{7,\}' <<< "$1" &>/dev/null || return 1
	sed 's/.*\([a-fA-F0-9]\{7,\}\).*/\1/' <<< "$1" || return $?
	return 0
}

# Function: commitbrowser:parse:action_from_menu
# Parses the action ID from the action menu output.
#
# Args:
#   $1  The fzf output.
#
# Stdout:
#   The action name.
commitbrowser:parse:action_from_menu() {
	sed 's/^\([a-z_]*\) *:: *.*$/\1/' <<< "$1"
}


# -----------------------------------------------------------------------------
# Tool Functions:
# -----------------------------------------------------------------------------

# Function: commitbrowser:tool:git
# Run git inside a directory.
commitbrowser:tool:git() {
	command git -C "${__COMMITBROWSER_DIRECTORY:-.}" "$@"
}

# Function: commitbrowser:tool:bat
# Pretty print a file with bat (or fall back to cat).
#
# Args:
#   $1  The file to print.
#   ... The bat arguments.
commitbrowser:tool:bat() {
	# Lazily load the actual function.
	if { command -v batcat || command -v bat; } &>/dev/null; then
		commitbrowser:tool:bat() {
			local bat="batcat"
			command -v "$bat" &>/dev/null || bat="bat"
			command "$bat" \
				--color=always \
				--paging=never \
				--wrap=character --terminal-width="$(commitbrowser:util:term_width)" \
				"${@:2}" -- "$1" \
				|| return $?
		}
	else
		commitbrowser:tool:bat() {
			cat "$1" || return $?
		}
	fi

	# Call the loaded function.
	commitbrowser:tool:bat "$@" || return $?
}

# Function: commitbrowser:tool:fzf
# Runs fzf.
#
# Stdin:
#   The lines to filter.
#
# Stdout:
#   The user's selected line.
commitbrowser:tool:fzf() {
	if { command -v fzf; } &>/dev/null; then
		commitbrowser:tool:fzf() {
			local status=0
			local args=("$@")

			# Add extra fzf args.
			if [[ "${__COMMITBROWSER_FZF_EXTRAS:-}" ]]; then
				args+=("${__COMMITBROWSER_FZF_EXTRAS[@]}")
			fi

			# If used from within fzf, write to the tty and don't clear.
			(
				if [[ "${__COMMITBROWSER_FZF:-}" = "tui" ]]; then
					exec 2>/dev/tty
					args+=(--no-clear)
					echo $$ 1>&3 # Print the PID so we know how to kill it.
				fi

				exec fzf --prompt=">>> " "${args[@]}"
			) || return $?
		}
	else
		commitbrowser:tool:fzf() {
			local tempfile="$(mktemp)"
			
			{
				echo "# The fzf tool was not found."
				echo "# Select a line by removing the '#'."
				echo ""
				sed $'s/^/#/; s/'$'\x1B''\[[0-9;]*m//'
			} > "$tempfile"

			# Have the user edit the file.
			"${EDITOR:-vim}" || {
				rm "$tempfile"
				return $?
			}

			# Return the first result.
			grep -v '^#' < "$tempfile" | head -n1 || true
			rm "$tempfile"
		}
	fi

	# Call the lazily-loaded function.
	commitbrowser:tool:fzf "$@" || return $?
}

# Function: commitbrowser:tool:fzf
# Runs fzf, with common options to make it look like a menu.
#
# Stdin:
#   The lines to filter.
#
# Stdout:
#   The user's selected line.
commitbrowser:tool:fzf_menu() {
	commitbrowser:tool:fzf "$@" \
		--no-sort \
		--no-hscroll \
		--ansi \
		--layout=reverse \
		--info=hidden \
		--preview-window="up:${__COMMITBROWSER_PREVIEW}" \
		--header=" " \
		|| return $?
}

# Function: commitbrowser:tool:less
# Runs less, supporting displaying info inside a menu without breaking things.
commitbrowser:tool:less() {(
	local args=(
		-R
	)

	# If used from within fzf, redirect stderr to the tty so less can print.
	# Also:
	#  - Don't let it initialize or deinitialize the alt screen buffer.
	#  - Clear the screen first.
	if [[ "${__COMMITBROWSER_FZF:-}" = "tui" ]]; then
		exec 2>/dev/tty 1>&2
		printf "\x1B[?1049h\x1B[2J\x1B[1;1H" 1>/dev/tty
		args+=(--no-init)
	fi

	command less "${args[@]}" "$@" || true
)}

# Function: commitbrowser:tool:pbcopy
# Copies the input to the system clipboard.
commitbrowser:tool:pbcopy() {
	if command -v pbcopy &>/dev/null; then
		command pbcopy
		return 0
	fi

	# Try OSC52.
	if command -v base64 &>/dev/null; then
		printf "\x1B]52;;%s\a" "$(printf "%s" "$(cat)" | command base64)" 1>/dev/tty
		return 0
	fi

	return 1
}

# Function: commitbrowser:tool:tac
# Reverses the order of the input lines.
commitbrowser:tool:tac() {
	if command -v tac &>/dev/null; then
		command tac
	else
		sed -n '1!G;h;$p'
	fi
}

# -----------------------------------------------------------------------------
# Library Functions:
# -----------------------------------------------------------------------------
__COMMITBROWSER_PREVIEW=12
__COMMITBROWSER_REF="HEAD"

# Function: commitbrowser:context:set_directory
# Sets the git repository to operate on.
#
# Args:
#   $1  The git repository directory.
commitbrowser:context:set_directory() {
	__COMMITBROWSER_DIRECTORY="$1"
}

# Function: commitbrowser:context:set_ref
# Sets the ref to operate on.
#
# Args:
#   $1  The git repository directory.
commitbrowser:context:set_ref() {
	__COMMITBROWSER_REF="$1"
}

# Function: commitbrowser:select_commit
# Runs fzf to select a commit from the git log.
#
# Stdout:
#   The commit hash.
commitbrowser:select_commit() {
	# Git log --online and send it through fzf.
	{
		commitbrowser:tool:git -c color.ui=always \
			log --graph --decorate --pretty=oneline --abbrev-commit \
			"${__COMMITBROWSER_REF}"
	} | {
		commitbrowser:tool:fzf_menu \
			--preview="$(commitbrowser:util:helper_command_preview_fzf preview)"
	}
}

# Function: commitbrowser:display_commit_description
# Displays the metadata and description of a commit.
#
# Args:
#   $1  The commit hash.
commitbrowser:display_commit_description() {
	# Get the commit info and split it into metadata and message.
	local info="$(commitbrowser:tool:git show "$1" --no-expand-tabs --no-patch --format=full)"

	local commit_metadata="$(sed '/^$/q' <<< "$info")"
	local commit_message="$(sed '1,/^$/ d; s/^    //' <<< "$info")"

	# Wrap the commit message.
	commit_message="$(fold -w "$(commitbrowser:util:term_width)" -s <<< "$commit_message")"
	
	# Pretty print the commit.
	printf "%s\n\n%s\n" "$commit_metadata" "$commit_message" \
		| commitbrowser:tool:bat - --tabs=0 --language=gitlog --plain
}

# Function: commitbrowser:display_commit_diff
# Displays the diff of a commit, preferably using delta.
#
# Args:
#   $1  The commit hash.
#   $2  [Optional] Against which ref?
commitbrowser:display_commit_diff() {
	if ! commitbrowser:tool:git rev-parse "${2:-$1~1}" &>/dev/null; then
		return
	fi

	commitbrowser:tool:git diff "${2:-$1~1}" "$1" \
	| {
		if command -v delta &>/dev/null; then
			BAT_PAGER='' delta --paging=never
		else
			commitbrowser:tool:bat - --language=diff
		fi
	}
}

# Function: commitbrowser:display_commit_diff_summary
# Displays a summary for the diff of a commit.
#
# Args:
#   $1  The commit hash.
#   $2  [Optional] Against which ref?
commitbrowser:display_commit_diff_summary() {
	if ! commitbrowser:tool:git rev-parse "${2:-$1~1}" &>/dev/null; then
		return
	fi

	commitbrowser:tool:git -c 'color.diff=always' diff --stat "${2:-$1~1}" "$1" \
	| commitbrowser:tool:tac | {
		# Print the last line first.
		local summary
		read -r summary
		echo "$summary"
		printf "\n"

		# Print the remaining lines in order.
		commitbrowser:tool:tac | sed 's/^ //'
	}
}


# -----------------------------------------------------------------------------
# Actions:
# -----------------------------------------------------------------------------
m_item=$':: \x1B[0m'
m_section=$' :: \x1B[33m'
action_menu=(
	"view_message   $m_item View commit message."
	"view_diff      $m_item View diff to parent commit."
	"view_diff_head $m_item View diff to HEAD."
	" :: "
	"copy_sha $m_item Copy commit SHA hash."
	" :: "
	"$m_section Operations:"
	"rebase      $m_item Rebase from commit."
	"cherry_pick $m_item Cherry pick commit."
)


# view_message: show the commit message.
commitbrowser:action:view_message:preview() {
	:
}

commitbrowser:action:view_message() {
	commitbrowser:display_commit_description "$1"
	return 0
}


# view_diff: show the commit diff
commitbrowser:action:view_diff:preview() {
	commitbrowser:display_commit_diff_summary "$1"
}

commitbrowser:action:view_diff() {
	commitbrowser:display_commit_diff "$1"
	return 0
}


# view_diff_head: show the diff against head
commitbrowser:action:view_diff_head:preview() {
	commitbrowser:display_commit_diff_summary "$1" "HEAD"
}

commitbrowser:action:view_diff_head() {
	commitbrowser:display_commit_diff "$1" "HEAD"
}

# copy_sha: copy the SHA
commitbrowser:action:copy_sha:preview() {
	commitbrowser:tool:git rev-parse "$1"
}

commitbrowser:action:copy_sha() {
	commitbrowser:tool:git rev-parse "$1" | commitbrowser:tool:pbcopy || {
		echo "Unable to copy commit ID to clipboard."
		return 0
	}

	echo "Copied commit ID to the clipboard."
	return 0
}


# rebase: start interactive rebase
commitbrowser:action:rebase:preview() {
	local count="$(commitbrowser:tool:git log --pretty=oneline "$1"..HEAD | wc -l)"
	printf "%s commit(s) to rebase since $1.\n\n" "$(($count))"
	commitbrowser:tool:git -c 'color.ui=always' \
		log --pretty=oneline --abbrev-commit "$1"..HEAD \
		| sed 's/\([0-9a-f]*'$'\x1B''\[0*m\) \([^: ]\{1,\}:\)/\1 '$'\x1B[34m\\2\x1B[0m''/'
}

commitbrowser:action:rebase() {
	commitbrowser:__ipc commitbrowser:tool:git rebase -i "$1"~1
	commitbrowser:__ipc exit
	return 0
}


# cherry_pick: cherry pick the commit
commitbrowser:action:cherry_pick:preview() {
	:
}

commitbrowser:action:cherry_pick() {
	commitbrowser:tool:git cherry-pick "$1"
	return 1
}

# -----------------------------------------------------------------------------
# Main:
# -----------------------------------------------------------------------------

# If this script has been sourced as a library, return so it doesn't execute
# the main block.
if [[ "${#BASH_SOURCE[@]}" -ne 1 ]]; then
	return 0
fi

# Make the script strict.
set -Eeu -o pipefail -o errtrace

# Debugging.
git() { debug_use_tool git; }
tac() { debug_use_tool tac; }
bat() { debug_use_tool bat; }
fzf() { debug_use_tool fzf; }
less() { debug_use_tool less; }
debug_use_tool() {
	printf "line %s: %s: Use commitbrowser:tool:%s instead.\n" \
		"$(caller 1 | cut -d' ' -f1)" \
		"$1" "$1" \
		&>/dev/tty
	exit 255
}

# If the script was opened from within fzf, we need to do some prep.
if [[ -n "${__COMMITBROWSER_HELPER:-}" && "${__COMMITBROWSER_FZF:-}" = "tui" ]]; then
	trap 'printf "\x1B[?1000h" >/dev/tty; # Re-enable mouse reporting.' EXIT
fi

# Handle internal functions.
case "${__COMMITBROWSER_HELPER:-}" in
	"") : ;;

	# Preview window.
	preview)
		commit="$(commitbrowser:parse:commit_from_git_log "$(cat)")" || exit 1
		commitbrowser:display_commit_description "$commit"
		commitbrowser:display_commit_diff_summary "$commit" | sed '1d'
		;;

	# View the commit diff.
	diff)
		commit="$(commitbrowser:parse:commit_from_git_log "$(cat)")" || exit 1
		printf "\x1B[?1049h\x1B[2J\x1B[2H" 1>&2
		{
			commitbrowser:util:boxed commitbrowser:display_commit_description "$commit"
			commitbrowser:display_commit_diff "$commit"
		} | commitbrowser:tool:less -K 1>&2
		;;
	
	# Copy the commit ID.
	copy)
		commit="$(commitbrowser:parse:commit_from_git_log "$(cat)")" || exit 1
		commitbrowser:tool:git rev-parse "$commit" | commitbrowser:tool:pbcopy
		;;

	# Open the action menu.
	menu)
		commit="$(commitbrowser:parse:commit_from_git_log "$(cat)")" || exit 1

		__COMMITBROWSER_FZF_EXTRAS=(
			--bind "enter:$(commitbrowser:util:helper_command_tui_fzf menu-item "$commit")"
		)

		{
			commitbrowser:tool:fzf_menu \
				--preview="$(commitbrowser:util:helper_command_preview_fzf menu-preview "$commit")" \
				--delimiter=" :: " \
				--prompt="[$commit] " \
				--with-nth=2 \
				-i \
				< <(printf "%s\n" "${header[@]}" "${action_menu[@]}")
		} 3>&1 | commitbrowser:__ipc_handle_breakexit 1>&3 || true
		;;

	menu-item)
		action="$(commitbrowser:parse:action_from_menu "$(cat)")"
		action_fn="commitbrowser:action:$action"
		commit="$1"

		{

			if type "$action_fn" &>/dev/null; then
				"$action_fn" "$commit" || commitbrowser:__ipc "break"
			elif [[ -n "$action" ]]; then
				echo "unknown commit browser action: $action"
			fi
		} 2>&1 | commitbrowser:util:pager -K
		;;
	
	# Preview window for the action menu.
	menu-preview)
		action="$(commitbrowser:parse:action_from_menu "$(cat)")"
		action_fn="commitbrowser:action:$action"
		commit="$1"

		# Print the commit message.
		commitbrowser:display_commit_description "$commit" \
			| sed '1,/^$/ d;' \
			| head -n 1 \
			| sed 's/^\('$'\x1B''\[[0-9;]*m\)    /\1/'

		if [[ -z "$action" ]]; then
			exit 0
		fi

		# If there's an action, preview the action.
		if type "$action_fn:preview" &>/dev/null; then
			"$action_fn:preview" "$commit"
		else
			echo "unknown commit browser action: $action"
		fi
		;;

	# Unknown helper.
	*)
		echo "unknown commit browser helper: $__COMMITBROWSER_HELPER"
		exit 1
		;;

esac

if [[ -n "${__COMMITBROWSER_HELPER:-}" ]]; then
	exit 0
fi

# Arguments.
if [[ "$#" -gt 0 ]]; then
	commitbrowser:context:set_ref "$1"
fi

# Prep.
trap '' SIGINT # Block default SIGINT behaviour.
               # Needed to prevent problems with Ctrl+C inside submenu or less

# Main.
__COMMITBROWSER_FZF_EXTRAS=(
	--bind "ctrl-d:$(commitbrowser:util:helper_command_tui_fzf diff)"
	--bind "ctrl-v:$(commitbrowser:util:helper_command_tui_fzf copy)"
	--bind "enter:$(commitbrowser:util:helper_command_tui_fzf menu)"
)

exec_commands=()
# Start the commit selection menu.
# This weird and ugly hack is because:
#  1. We need to carry the exec_commands over and can't use a subshell.
#  2. We can't include __ipc_handle_breakexit in the subshell, since pgrep
#     doesn't work when the target pid == subshell pid.
{
	read -r target_pid
	while read -r cmd; do
		cmd="$(printf "%s\n" "$target_pid" "$cmd" | commitbrowser:__ipc_handle_breakexit)"
		if [[ -n "$cmd" ]]; then
			exec_commands+=("$cmd")
		fi
	done
} < <({
	echo $$ 1>&3 # Print the PID so we know how to kill it.
	commitbrowser:select_commit >/dev/null
} 3>&1-) 

# Run any deferred commands.
if [[ -n "${exec_commands:-}" ]]; then
	for cmd in "${exec_commands[@]}"; do
		eval "$cmd"
	done
fi

